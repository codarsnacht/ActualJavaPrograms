package week7;

/**
 * Circle class represents a circle 
 * in 2 dimensional space
 * It is defined by a Point that represents its top left hand corner
 * and by its width and height
 */

public class Circle extends Figure {
	double radius;
	private Point point;

	public Circle(Point hub1, double d) {
		this.point = hub1;
		this.radius = d;
		
		double Carea = Math.PI * radius * radius;
		
		System.out.println("area of circle is " + Carea );
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		
		return Math.PI * radius * radius;
	}

	@Override
	public int getFigures() {
		// watch video for getting numfiles 
		return 1;
	}
	
	//ToDo : you must implement the functionality of the Circle class

}



package week7;

/**
 * main method for demonstrating how these Shapes can be assembled into the shape of a Car
 *
 */
public class DrawCar {

	public static void main(String[] args) {

		// for this program, we'll assume that the input is an array of double values
		double[] input = {2,3,3,1,3,4,1,1,0.5,2.5,4.5};

		//create a new Drawing
		Drawing car = new Drawing();

		Point Point1 = new Point(input[0], input[1]); // (x, y) coordinates
		Rectangle body = new Rectangle(Point1, input[2], input[3]); // (top left hand point, width, height)

		Point Point2 = new Point(input[4], input[5]); // (x, y) coordinates
		Rectangle top = new Rectangle(Point2, input[6], input[7]); // (top left hand point, width, height)

		car.add(body); // add body to car Drawing
		car.add(top); // add top to car Drawing

		Point hub1 = new Point(input[9], input[0]); // (x, y) coordinates
		Point hub2 = new Point(input[10], input[0]); // (x, y) coordinates

		Circle wheel1 = new Circle(hub1, input[8]); // (centre, radius)
		Circle wheel2 = new Circle(hub2, input[8]); // (centre, radius)

		Drawing chassis = new Drawing();
		chassis.add(wheel1); // add wheel1 to chassis Drawing
		chassis.add(wheel2); // add wheel2 to chassis Drawing

		car.add(chassis); //add chassis Drawing to car Drawing

		//print area
		car.printArea();
		//print number of shapes
		car.printNumShapes();

	}

}



package week7;

public class DrawHouse {
	public static void main(String[] args) {
	// house consists of a square base , with a triangle roof and a rectangle chimley on the side
	
		
		// points on grid required
		int[] input = {1,2,3,4};
		
		//create new plan for house
		plan house = new plan();
		
		Point pointH1 = new Point(input[0] , input[2]);
		Rectangle ground = new Rectangle(pointH1, input[1], input[1]);//actually a square but same method applies to both
		
		Point pointH2 = new Point ( input[2], input[3]);
		Rectangle chim = new Rectangle(pointH2, input[0], input[2]);//chimmley //chimney
		
		Point pointH3 = new Point ( input[0], input[3]);
		triangle roof = new triangle(pointH3, input[0], input[2]);//roof
		
		house.add( ground);
		house.add( chim);
		house.add( roof);
		
		
		//print area
				house.printArea();
				//print number of shapes
				house.printNumShapes();
		
		
	
	}
}



package week7;

import java.util.ArrayList;

/**
 * a Drawing object is composed of number of basic shape objects (e.g Rectangle, Circle, Point)
 * and other Drawing objects
 *
 */
public class Drawing extends Figure {


	
	
	ArrayList<Figure> figures ;
	
	public Drawing(){
		figures = new ArrayList<Figure>();
	}
	
	public void add( Figure body){
		figures.add(body);
		
	}
	

	

	public void printArea() {
		// TODO Auto-generated method stub
		System.out.println("my total area is " + getArea() );
		
	}

	@Override
	public double getArea() {
		double totalArea = 0;
		for ( Figure fig : figures){
			totalArea += fig.getArea();
		}
		return totalArea;
	}

	@Override
	public int getFigures() {
		// watch video for getting numfiles 
		int totalFigs = 0;
		for ( Figure fig : figures){
			totalFigs += fig.getFigures();
		}
		return totalFigs;
	}

	public void printNumShapes() {
		System.out.println("Number of shapes are " + getFigures());
		
	}
	
	
	//ToDo : you must implement the functionality of the Drawing class

}



package week7;

public abstract class Figure {
	
	
	public abstract double getArea();
	public abstract int getFigures();
}



package week7;

import java.util.ArrayList;

public class plan extends Figure {

	
	ArrayList<Figure> figures ;
	
	public plan(){
		figures = new ArrayList<Figure>();
	}
	
	public void add( Figure body){
		figures.add(body);
		
	}
	
	
	
	@Override
	public double getArea() {
		double totalArea = 0;
		for ( Figure fig : figures){
			totalArea += fig.getArea();
		}
		return totalArea;
	}

	@Override
	public int getFigures() {
		int totalFigs = 0;
		for ( Figure fig : figures){
			totalFigs += fig.getFigures();
		}
		return totalFigs;
	}

	public void printArea() {
		// TODO Auto-generated method stub
		System.out.println("my total area is " + getArea() );
	}

	public void printNumShapes() {
		// TODO Auto-generated method stub
		//printing figures
		System.out.println("Number of shapes are " + getFigures());
		
	}

}



package week7;




/**
 * Point class represents the x, y coordinates of a single point
 * in 2 dimensional space
 */

public class Point {
	private double x;
	private double y;

	public Point(double d, double e) {
		this.x = d;
		this.y = e;
		
	}
	
	


}



package week7;

/**
 * Rectangle class represents a rectangle 
 * in 2 dimensional space
 * It is defined by a Point that represents its top left hand corner
 * and by its width and height
 */

	


public class Rectangle extends Figure {
		
		private Point p;
		private double x;
		private double y;
		
		
	public Rectangle(Point point1, double d, double e) {
		// TODO Auto-generated constructor stub
		//this{dot} etc
		this.p = point1;
		this.x = d;
		this.y = e;
		
		double Rarea = x*y;
		System.out.println("Area of rectangle is " + Rarea);
	}

	@Override
	public double getArea() {
		
		return x * y;
		
	}

	@Override
	public int getFigures() {
		 
		return  1;
	}


		
	}




package week7;

public class triangle extends Figure  {

	private Point p;
	private double x;
	private double y;
	
	
	public triangle(Point pointH3, int i, int j) {
		this.p = pointH3;
		this.x = i;
		this.y = j;
		
		
		double Tarea = (x*y)/2;
		System.out.println("Area of triangle is " + Tarea);
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return (x*y)/2;
	}

	@Override
	public int getFigures() {
		// TODO Auto-generated method stub
		return 1;
	}

}
